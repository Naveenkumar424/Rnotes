### Introduction to R Programming Language

R is a powerful and versatile programming language and software environment primarily used for statistical computing, data analysis, and graphical representation. It was created by Ross Ihaka and Robert Gentleman at the University of Auckland, New Zealand, and released in 1993. R is widely used by statisticians, data scientists, and researchers for its extensive libraries and active community support.

### Features of R
- **Open Source**: R is free and open-source, allowing users to modify and distribute the software.
- **Comprehensive**: Provides a wide range of statistical and graphical techniques.
- **Extensible**: Allows users to add additional functionality through packages.
- **Cross-Platform**: Runs on various operating systems, including Windows, macOS, and Linux.
- **Active Community**: Strong community support with numerous packages contributed by users.

### Data Types in R
- **Numeric**: Represents numerical values. Examples: `12.5`, `-7`, `3.14`
- **Integer**: Represents whole numbers. Examples: `2L`, `-5L`
- **Character**: Represents text strings. Examples: `"Hello"`, `"R programming"`
- **Logical**: Represents Boolean values. Examples: `TRUE`, `FALSE`
- **Complex**: Represents complex numbers. Examples: `2+3i`, `1-4i`

### Operators in R
- **Arithmetic Operators**: `+`, `-`, `*`, `/`, `^` (exponentiation)
- **Assignment Operators**: `<-`, `=`, `->`
- **Comparison Operators**: `==`, `!=`, `>`, `<`, `>=`, `<=`
- **Logical Operators**: `&`, `|`, `!`

### Data Objects in R
- **Vectors**: One-dimensional arrays that can hold numeric, character, or logical data.
  ```r
  vec <- c(1, 2, 3, 4)
  ```
- **Lists**: Can hold elements of different types, including numbers, strings, vectors, and even other lists.
  ```r
  lst <- list(name="John", age=25, scores=c(85, 90, 95))
  ```
- **Matrices**: Two-dimensional arrays that can hold numeric, character, or logical data.
  ```r
  mat <- matrix(1:6, nrow=2, ncol=3)
  ```
- **Arrays**: Multi-dimensional, generalizations of vectors and matrices.
  ```r
  arr <- array(1:12, dim=c(2, 3, 2))
  ```
- **Data Frames**: Two-dimensional, tabular data structures that can hold different types of data in each column.
  ```r
  df <- data.frame(name=c("John", "Jane"), age=c(25, 30), score=c(85, 90))
  ```
- **Factors**: Used to handle categorical data.
  ```r
  factor_vec <- factor(c("Male", "Female", "Male"))
  ```

### Conditions and Loops in R
- **if Statement**:
  ```r
  if (x > 0) {
    print("Positive")
  } else {
    print("Non-positive")
  }
  ```
- **switch Statement**:
  ```r
  result <- switch(choice, "A"=1, "B"=2, "C"=3)
  ```
- **while Loop**:
  ```r
  count <- 1
  while (count <= 5) {
    print(count)
    count <- count + 1
  }
  ```
- **for Loop**:
  ```r
  for (i in 1:5) {
    print(i)
  }
  ```
- **repeat Loop**:
  ```r
  count <- 1
  repeat {
    print(count)
    count <- count + 1
    if (count > 5) {
      break
    }
  }
  ```

### String Handling in R
- **Concatenation**:
  ```r
  str1 <- "Hello"
  str2 <- "World"
  str3 <- paste(str1, str2)
  # Output: "Hello World"
  ```
- **Substrings**:
  ```r
  substr("Hello", 2, 4)  # Output: "ell"
  ```
- **String Length**:
  ```r
  nchar("Hello")  # Output: 5
  ```

### Calling Functions
You can call built-in functions or user-defined functions:
```r
result <- mean(c(1, 2, 3, 4, 5))  # Calling built-in function
```

### Writing Functions
You can define your own functions in R:
```r
my_function <- function(a, b) {
  return(a + b)
}

result <- my_function(2, 3)  # Output: 5
```

R is a versatile and powerful language that supports various data analysis and graphical capabilities, making it an essential tool for statisticians and data scientistsðŸ˜ŠðŸ“ŠðŸ’»